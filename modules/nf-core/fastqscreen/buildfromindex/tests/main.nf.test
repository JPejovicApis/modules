nextflow_process {

    name "Test Process FASTQSCREEN_BUILDFROMINDEX"
    script "../main.nf"
    process "FASTQSCREEN_BUILDFROMINDEX"

    tag "modules"
    tag "modules_nfcore"
    tag "fastqscreen"
    tag "fastqscreen/buildfromindex"
    tag "bowtie2/build"

    test("sarscov2 - human") {

        setup {

            run("BOWTIE2_BUILD") {
                script "../../../bowtie2/build/main.nf"
                process {
                    """
                    input[0] =  Channel.from([
                                        [[id: "sarscov2"], file(params.test_data['sarscov2']['genome']['genome_fasta'], checkIfExists: true)],
                                        [[id: "human"]   , file(params.test_data['homo_sapiens']['genome']['genome_21_fasta'], checkIfExists: true)]
                                ])
                    """
                }
            }

        }

        when {
            process {
                """
                input[0] = BOWTIE2_BUILD.out.index.map{meta, index -> meta.id}.collect()
                input[1] = BOWTIE2_BUILD.out.index.map{meta, index -> index}.collect()
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

    test("sarscov2 - human - stub") {

        options "-stub"

        setup {

            run("BOWTIE2_BUILD") {
                script "../../../bowtie2/build/main.nf"
                process {
                    """
                    input[0] =  Channel.from([
                                        [[id: "sarscov2"], file(params.test_data['sarscov2']['genome']['genome_fasta'], checkIfExists: true)],
                                        [[id: "human"]   , file(params.test_data['homo_sapiens']['genome']['genome_21_fasta'], checkIfExists: true)]
                                ])
                    """
                }
            }
        }

        when {
            process {
                """
                input[0] = BOWTIE2_BUILD.out.index.map{meta, index -> meta.id}.collect()
                input[1] = BOWTIE2_BUILD.out.index.map{meta, index -> index}.collect()
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

}
